/*
Created by: Miguel Garcia <miguel.garciarod@gmail.com>
Date: 2013
Github: miguelgr

You are free to use, modify and improve this keymap.

They keybindings described here are personalized but might be a reference for you to customize your owns.

Inspired in Emacs and GNU/Linux Terminal.


They work with the following packages:

    - Emment
    - Mark and Move
    - Plain Tasks
*/


[

// Sublime Controls Extends default
    { "keys": ["super+,"], "command": "open_file", "args": {"file": "${packages}/User/Preferences.sublime-settings"} }, // User Settings
    { "keys": ["super+."], "command": "open_file", "args": {"file": "${packages}/User/Default (OSX).sublime-keymap"} }, // User Keybindings
    { "keys": ["super+shift+p"], "command": "show_overlay", "args": {"overlay": "command_palette"} }, // Palette
    { "keys": ["ctrl+s"], "command": "toggle_side_bar" }, // Toggle SideBar
    { "keys": ["super+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} }, // GOTO
    { "keys": ["super+shift+w"], "command": "close_all" }, // Close ALL
    { "keys": ["alt+shift+,"], "command": "move_to", "args": {"to": "bof", "extend": false}},
    { "keys": ["alt+shift+."], "command": "move_to", "args": {"to": "eof", "extend": false}},
    { "keys": ["ctrl+space"], "command": "auto_complete" },
    { "keys": ["ctrl+space"], "command": "replace_completion_with_auto_complete", "context":
        [
            { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
            { "key": "auto_complete_visible", "operator": "equal", "operand": false },
            { "key": "setting.tab_completion", "operator": "equal", "operand": true }
        ]
    },


//Search
    { "keys": ["ctrl+alt+f"], "command": "side_bar_find_files_path_containing" },


// Terminal keybindings
    { "keys": ["ctrl+i"], "command": "show_at_center" }, // Center line
    { "keys": ["ctrl+a"], "command": "move_to", "args": {"to": "bol", "extend": false} }, //beggining of line
    { "keys": ["ctrl+e"], "command": "move_to", "args": {"to": "eol", "extend": false} }, // end of line
    { "keys": ["alt+b"], "command": "move", "args": {"by": "words", "forward": false} }, // Backwards (word)
    { "keys": ["alt+f"], "command": "move", "args": {"by": "subword_ends", "forward": true} }, // Forwards (word)
    { "keys": ["alt+e"], "command": "move", "args": {"by": "wholelines", "forward": true, "extend": false } }, // End of next line (selecting text)
    { "keys": ["alt+a"], "command": "move", "args": {"by": "wholelines", "forward": false, "extend": false} }, // End of previous line (selecting text)
    { "keys": ["alt+t"], "command": "transpose" },
    { "keys": ["ctrl+k"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete to Hard EOL.sublime-macro"} }, // Kill from cursor to EOL
    { "keys": ["ctrl+u"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete to Hard BOL.sublime-macro"} }, // Kill from cursor to BOL
    { "keys": ["ctrl+l"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Line.sublime-macro"} }, // Delete line (clear)
    { "keys": ["ctrl+w"], "command": "delete_word", "args": { "forward": false, "sub_words": false } }, // Delete Backward
    { "keys": ["alt+d"], "command": "delete_word", "args": { "forward": true, "sub_words": true } }, // Delete forward
    { "keys": ["ctrl+d"], "command": "right_delete"}, // Delete == Supr

// Editing
    { "keys": ["super+alt+["], "command": "fold" }, // fold
    { "keys": ["super+alt+]"], "command": "unfold" }, // unfold
    { "keys": ["super+]"], "command": "indent" }, // indent
    { "keys": ["super+["], "command": "unindent" }, // unindent
    { "keys": ["ctrl+j"], "command": "join_lines" }, // join
    { "keys": ["super+k", "super+u"], "command": "upper_case" }, // upercase
    { "keys": ["super+k", "super+l"], "command": "lower_case" }, // lowercase


// Paning in vertical

    {
        "keys": ["ctrl+x", "1"],
        "command": "set_layout",
        "args":
        {
            "cols": [0.0, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1]]
        }
    },
    {
        "keys": ["ctrl+x", "2"],
        "command": "set_layout",
        "args":
        {
            "cols": [0.0, 0.5, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
        }
    },
    {
        "keys": ["ctrl+x", "3"],
        "command": "set_layout",
        "args":
        {
            "cols": [0.0, 0.33, 0.66, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]]
        }
    },
    {
        "keys": ["ctrl+x", "4"],
        "command": "set_layout",
        "args":
        {
            "cols": [0.0, 0.25, 0.5, 0.75, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]]
        }
    },
// Selection
    { "keys": ["alt+shift+b"], "command": "move", "args": {"by": "subwords", "forward": false, "extend": true} }, //select backwards
    { "keys": ["alt+shift+f"], "command": "move", "args": {"by": "subword_ends", "forward": true, "extend": true} }, //select forward

    { "keys": ["ctrl+super+p"], "command": "swap_line_up" },
    { "keys": ["ctrl+super+n"], "command": "swap_line_down" },

    { "keys": ["alt+shift+p"], "command": "select_lines", "args": {"forward": false} }, // cursor in previous line
    { "keys": ["alt+shift+n"], "command": "select_lines", "args": {"forward": true} }, // cursor in next line

    { "keys": ["super+shift+space"], "command": "expand_selection", "args": {"to": "scope"} },
    { "keys": ["super+shift+j"], "command": "expand_selection", "args": {"to": "indentation"} },
    { "keys": ["super+shift+a"], "command": "expand_selection", "args": {"to": "tag"} },
    { "keys": ["super+l"], "command": "expand_selection", "args": {"to": "line"} },
    // Find
    { "keys": ["super+i"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse":false} },
    { "keys": ["super+shift+i"], "command": "show_panel", "args": {"panel": "incremental_find", "reverse":true} },
    { "keys": ["super+f"], "command": "show_panel", "args": {"panel": "find"} },
    { "keys": ["super+alt+f"], "command": "show_panel", "args": {"panel": "replace"} },
    { "keys": ["super+alt+e"], "command": "replace_next" },
    { "keys": ["super+g"], "command": "find_next" },
    { "keys": ["super+shift+g"], "command": "find_prev" },

    { "keys": ["super+d"], "command": "find_under_expand" },
    { "keys": ["super+k", "super+d"], "command": "find_under_expand_skip" },
    { "keys": ["super+alt+."], "command": "close_tag" },
    { "keys": ["ctrl+q"], "command": "toggle_recordd_macro" },
    { "keys": ["ctrl+shift+q"], "command": "run_macro" },
    { "keys": ["tab"], "command": "indent", "context": [{ "key": "text", "operator": "regex_contains", "operand": "\n" } ] },
    { "keys": ["tab"], "command": "next_field", "context": [{ "key": "has_next_field", "operator": "equal", "operand": true } ] },

 // Bookmarks
    { "keys": ["ctrl+shift+o"], "command": "next_bookmark" },
    { "keys": ["ctrl+o"], "command": "prev_bookmark" },
    { "keys": ["ctrl+m"], "command": "toggle_bookmark" },
    { "keys": ["ctrl+alt+m"], "command": "clear_bookmarks" },
    { "keys": ["alt+m"], "command": "select_all_bookmarks" },



// Emment (Package)
    {"keys": ["shift+super+,"], "args": {"action": "select_previous_item"}, "command": "run_emmet_action", "context": [{"key": "emmet_action_enabled.select_previous_item"} ] },
    { "keys": ["ctrl+shift+p"], "command": "", "args": {"forward": false} },
    { "keys": ["ctrl+shift+n"], "command": "", "args": {"forward": true} },
    {"keys": ["super+shift+forward_slash"], "args": {"action": "toggle_comment"}, "command": "run_emmet_action", "context": [{"operand": "source.css - source.css.less, text.xml, text.html - source", "operator": "equal", "match_all": true, "key": "selector"}, {"match_all": true, "key": "emmet_action_enabled.toggle_comment"} ] },



// Plain Tasks (Package)
    { "keys": ["super+f"], "command": "plain_tasks_complete","context": [{ "key": "selector", "operator": "equal", "operand": "text.todo" }] },
    { "keys": ["super+m"], "command": "plain_tasks_cancel", "context": [{"key": "selector", "operator": "equal", "operand": "text.todo" }] },
    { "keys": ["super+enter"], "command": "plain_tasks_new","context": [{ "key": "selector", "operator": "equal", "operand": "text.todo" }] },
    { "keys": ["super+i"], "command": "plain_tasks_new","context": [{ "key": "selector", "operator": "equal", "operand": "text.todo" }] },
    { "keys": ["super+shift+a"], "command": "plain_tasks_archive","context": [{ "key": "selector", "operator": "equal", "operand": "text.todo" }] },
    { "keys": ["super+shift+u"], "command": "plain_tasks_open_url","context": [{ "key": "selector", "operator": "equal", "operand": "text.todo" }] }

]
